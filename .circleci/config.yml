version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.6
  aws-ecr: circleci/aws-ecr@7.2.0
  serverless: circleci/serverless-framework@1.0.1

aliases:
  - &dev_conditions
    filters:
      branches:
        only:
          - development
          - master
  - &master_conditions
    filters:
      branches:
        only:
          - master
    requires:
      - pytest-dev
  - &base_image
    docker:
      - image: cimg/base:2021.04
  - &fix_docker
    run:
      name: fix-docker
      command: |
        if [[ $CIRCLE_SHELL_ENV == *"localbuild"* ]]; then
          sudo chown $(whoami):$(whoami) /run/docker-temp.sock
        fi

jobs:
  pytest:
    environment:
      DOCKER_BUILDKIT: "1"
    parameters:
      stage:
        type: string
    <<: *base_image
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.09.3
      - aws-ecr/ecr-login
      - run: docker build -f pytest/Dockerfile -t pytest . --cache-from=${AWS_ECR_ACCOUNT_URL}/serverless-chromeless-pytest --build-arg BUILDKIT_INLINE_CACHE=1
      - aws-ecr/build-and-push-image:
          checkout: false
          create-repo: true
          repo: serverless-chromeless-pytest
          tag: "latest,<< pipeline.git.revision >>"
          dockerfile: pytest/Dockerfile
          skip-when-tags-exist: true
      - when:
          condition:
            equal: [local, << parameters.stage >>]
          steps:
            - aws-ecr/ecr-login
            - run: docker build -t chromeless . --cache-from=${AWS_ECR_ACCOUNT_URL}/serverless-chromeless-dev --build-arg BUILDKIT_INLINE_CACHE=1
            - aws-ecr/build-and-push-image:
                checkout: false
                create-repo: true
                repo: serverless-chromeless-dev
                tag: "latest,<< pipeline.git.revision >>"
                skip-when-tags-exist: true
            - run: echo CHROMELESS_SERVER_FUNCTION_NAME=local > .env
            - run:
                name: Run tests [<< parameters.stage >>]
                command: |
                  docker rm -f chromeless || true
                  docker network rm chromeless-network || true
                  docker network create chromeless-network
                  docker run --network chromeless-network --name chromeless -d chromeless
                  docker run --network chromeless-network --env-file .env -w /latest pytest
                  docker run --network chromeless-network --env-file .env -w /0.4.8 pytest
                  docker rm -f chromeless
      - unless:
          condition:
            equal: [local, << parameters.stage >>]
          steps:
            - aws-cli/setup
            - run:
                name: Run remote tests [<< parameters.stage >>]
                command: |
                  env >> .env # AWS credentials
                  tee -a .env \<< END >/dev/null
                  CHROMELESS_SERVER_FUNCTION_NAME=chromeless-server-<< parameters.stage >>
                  API_URL=$(aws cloudformation describe-stacks --stack-name chromeless-<< parameters.stage >> --query "Stacks[0].Outputs[?OutputKey=='ServiceEndpoint'].OutputValue" --output text)
                  API_KEY=$(aws apigateway get-api-keys --query 'items[?name==`chromeless-apikey-<< parameters.stage >>`].value' --include-values --output text)
                  END
                  MAJOR_CHANGE_VERSIONS=('latest' '0.2.9' '0.3.0' '0.3.6' '0.4.7' '0.4.8')
                  for ver in "${MAJOR_CHANGE_VERSIONS[@]}"
                  do
                      docker rm -f pypi-$ver || true
                      docker run -d --name=pypi-$ver --env-file .env -w /$ver pytest
                  done
                  for ver in "${MAJOR_CHANGE_VERSIONS[@]}"
                  do
                      code=$(docker wait pypi-$ver)
                      docker logs pypi-$ver
                      echo pypi-$ver finished with $code
                      if (( code > 0 )); then exit $code; fi
                  done
  sls:
    parameters:
      stage:
        type: string
    executor: serverless/default
    steps:
      - checkout
      - aws-cli/setup
      - serverless/setup
      - setup_remote_docker
      - <<: *fix_docker
      - run: sls deploy --stage << parameters.stage >> --region $AWS_REGION --conceal | grep -v "execute-api"

  pypi:
    parameters:
      stage:
        type: string
      repository:
        type: string
      username:
        type: string
      password:
        type: string
    <<: *base_image
    steps:
      - checkout
      - setup_remote_docker
      - run: docker build . -t pypienv -f pypi/Dockerfile
      - run: touch chromeless/__version__.py
      - run:
          name: publish pypi package [<< parameters.stage >>]
          command: |
            env > .env
            tee -a .env \<< END
            PKG_NAME=chromeless
            DIR_NAME=chromeless
            PYPI_USERNAME=${<< parameters.username >>}
            PYPI_PASSWORD=${<< parameters.password >>}
            REPOSITORY=<< parameters.repository >>
            STAGE=<< parameters.stage >>
            END
            docker run --env-file .env pypienv

workflows:
  version: 2
  main:
    jobs:
      - pytest:
          name: "pytest-local"
          stage: "local"
          <<: *dev_conditions
      - sls:
          name: "sls-dev"
          stage: "dev"
          <<: *dev_conditions
      - pypi:
          name: "pypi-dev"
          stage: "stg"
          repository: "testpypi"
          username: PYPI_USERNAME_DEV
          password: PYPI_PASSWORD_DEV
          <<: *dev_conditions
      - pytest:
          name: "pytest-dev"
          stage: "dev"
          requires:
            - pypi-dev
            - sls-dev
      - sls:
          name: "sls-prod"
          stage: "prod"
          <<: *master_conditions
      - pypi:
          name: "pypi-prod"
          stage: "prod"
          repository: "pypi"
          username: PYPI_USERNAME_PROD
          password: PYPI_PASSWORD_PROD
          <<: *master_conditions
      - pytest:
          name: "pytest-prod"
          stage: "prod"
          requires:
            - pypi-prod
            - sls-prod
