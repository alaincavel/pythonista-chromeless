version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.6
  aws-ecr: circleci/aws-ecr@7.2.0
  serverless: circleci/serverless-framework@1.0.1

aliases:
  - &master_conditions
    filters:
      branches:
        only:
          - master
    requires:
      - pytest-dev
  - &base_image
    machine:
      image: ubuntu-2004:202111-02
  - &fix_docker
    run:
      name: fix-docker
      command: |
        if [[ $CIRCLE_SHELL_ENV == *"localbuild"* ]]; then
          sudo chown $(whoami):$(whoami) /run/docker-temp.sock
        fi

jobs:
  pytest:
    environment:
      DOCKER_BUILDKIT: "1"
    parameters:
      stage:
        type: string
      chromeless-server-function-name:
        type: string
    <<: *base_image
    steps:
      - checkout
      - aws-cli/setup
      - <<: *fix_docker
      - run:
          name: Test
          command: |
            CHROMELESS_SERVER_FUNCTION_NAME=${<< parameters.chromeless-server-function-name >>}
            STAGE=${<< parameters.stage >>}
            LOCAL_PYTHON_VERSION=3.7

            cat \<<EOF > pytest/.env
            LOCAL_PYTHON_VERSION=$LOCAL_PYTHON_VERSION
            CHROMELESS_SERVER_FUNCTION_NAME=$CHROMELESS_SERVER_FUNCTION_NAME
            LOCAL_CHROMELESS_PYPI_VERSION=
            LOCAL_CHROMELESS_HOSTNAME=
            CACHEBUST=
            EOF

            [ "$CHROMELESS_SERVER_FUNCTION_NAME" != "local" ] && cat \<<EOF >> pytest/.env
            AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            AWS_REGION=$AWS_REGION
            AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
            API_URL=$(aws cloudformation describe-stacks --stack-name chromeless-${STAGE} --query "Stacks[0].Outputs[?OutputKey=='ServiceEndpoint'].OutputValue" --output text)
            API_KEY=$(aws apigateway get-api-keys --query "items[?name=='chromeless-apikey-${STAGE}'].value" --include-values --output text)
            EOF

            docker-compose -f pypi/docker-compose.yml up --build --force-recreate -d
            PYPI_RELEASE_VERSION=$(docker-compose -f pypi/docker-compose.yml run --rm publisher python -c 'import __version__;print(__version__.__version__)')

            CHROMELESS_VERSIONS=('0.2.9' '0.3.0' '0.3.6' '0.4.7' '0.4.8' $PYPI_RELEASE_VERSION)
            [ "$CHROMELESS_SERVER_FUNCTION_NAME" == "local" ] && CHROMELESS_VERSIONS=("${CHROMELESS_VERSIONS[@]:5}")

            for i in "${!CHROMELESS_VERSIONS[@]}"; do
                sed -r "s/LOCAL_CHROMELESS_PYPI_VERSION=.*$/LOCAL_CHROMELESS_PYPI_VERSION=${CHROMELESS_VERSIONS[$i]}/g; s/LOCAL_CHROMELESS_HOSTNAME=.*$/LOCAL_CHROMELESS_HOSTNAME=chromeless$(date +%s)$RANDOM/g; s/CACHEBUST=.*$/CACHEBUST=$(date +%s)$RANDOM/g" -i pytest/.env
                set -a && source pytest/.env && set +a
                docker-compose -f pytest/docker-compose.yml -p p$i up --build --force-recreate -d
            done
            for i in "${!CHROMELESS_VERSIONS[@]}"; do
                code=$(docker wait p${i}_pytest_1)
                docker logs p${i}_pytest_1
                docker kill p${i}_chromeless_1
                echo p${i}_pytest_1 finished with $code
                if (( code > 0 )); then exit $code; fi
            done
  sls:
    parameters:
      stage:
        type: string
    executor: serverless/default
    steps:
      - checkout
      - aws-cli/setup
      - serverless/setup
      - <<: *fix_docker
      - run:
          name: Deploy
          command: |
            sls deploy --stage << parameters.stage >> --region ${AWS_REGION} --conceal | grep -v "execute-api"

  pypi:
    parameters:
      repository:
        type: string
      username:
        type: string
      password:
        type: string
    <<: *base_image
    steps:
      - checkout
      - <<: *fix_docker
      - run:
          name: Publish
          command: |
            PYPI_USERNAME=${<< parameters.username >>}
            PYPI_PASSWORD=${<< parameters.password >>}
            REPOSITORY=<< parameters.repository >>
            docker-compose -f pypi/docker-compose.yml build
            docker-compose -f pypi/docker-compose.yml run publisher twine upload --verbose -u ${PYPI_USERNAME} -p ${PYPI_PASSWORD} --repository ${REPOSITORY} dist/*

workflows:
  version: 2
  main:
    jobs:
      - pytest:
          name: "pytest-local"
          stage: "local"
          chromeless-server-function-name: "local"
          filters:
            branches:
              ignore:
                - master
      - pypi:
          name: "pypi-dev"
          repository: "testpypi"
          username: PYPI_USERNAME_DEV
          password: PYPI_PASSWORD_DEV
          requires:
            - pytest-local
      - sls:
          name: "sls-dev"
          stage: "dev"
          requires:
            - pytest-local
      - pytest:
          name: "pytest-dev"
          stage: "dev"
          chromeless-server-function-name: "chromeless-server-dev"
          requires:
            - pypi-dev
            - sls-dev
      - sls:
          name: "sls-prod"
          stage: "prod"
          <<: *master_conditions
      - pypi:
          name: "pypi-prod"
          repository: "pypi"
          username: PYPI_USERNAME_PROD
          password: PYPI_PASSWORD_PROD
          <<: *master_conditions
      - pytest:
          name: "pytest-prod"
          chromeless-server-function-name: "chromeless-server-prod"
          stage: "prod"
          requires:
            - pypi-prod
            - sls-prod
